// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// Source de données PostgreSQL
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modèle User
model Users {
  id        String   @id @default(uuid())
  nom       String
  prenom    String
  email     String   @unique
  phone     String   @unique
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation avec les enfants
  children Children[] // un parent peut avoir plusieurs enfants
}

// Enum des rôles
enum Role {
  PARENT
  ADMIN
  DRIVER
}

// Modèle Children
model Children {
  id       String @id @default(uuid())
  nom      String
  prenom   String
  adresse  String //adresse de l'enfant 
  homeLat  Float
  homeLong Float

  // Relation vers l'école
  school   School @relation(fields: [schoolId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  schoolId String

  // Relation obligatoire avec l'image de profil
  imageprofile   Image  @relation(fields: [imageprofileId], references: [id])
  imageprofileId String @unique

  // Relation avec le parent (suppression en cascade)
  parent   Users  @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId String
}

model School {
  id         String @id @default(uuid())
  nom        String
  adresse    String
  schoolLat  Float
  schoolLong Float

  // Relation inverse
  children Children[]
}

// Modèle Image
model Image {
  id    String    @id @default(uuid())
  url   String
  child Children? @relation
}
