// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// Source de données PostgreSQL
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modèle User
model Users {
  id        String   @id @default(uuid())
  nom       String
  prenom    String
  email     String   @unique
  phone     String   @unique
  role      Role     @default(PARENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  children      Children[] // Pour les parents
  subscriptions Subscription[] // Pour les parents
  driverProfile DriverProfile? // Pour les chauffeurs
}

// Enum des rôles
enum Role {
  PARENT
  ADMIN
  DRIVER
}

// Modèle DriverProfile (profil spécifique aux chauffeurs)
model DriverProfile {
  id     String @id @default(uuid())
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Photo de profil
  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique

  // Relation vers le permis
  license   DriverLicense? @relation(fields: [licenseId], references: [id])
  licenseId String?        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modèle Permis (informations du permis)
model DriverLicense {
  id                String   @id @default(uuid())
  licenseNumber     String
  licenseType       String
  licenseExpiration DateTime

  // Photos du permis
  photoFront String?
  photoBack  String?

  status DriverStatus @default(PENDING)

  driverProfile DriverProfile?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum DriverStatus {
  PENDING // Attente validation admin
  APPROVED // Compte validé
  DECLINED // Refusé
}

// Modèle Children
model Children {
  id       String @id @default(uuid())
  nom      String
  prenom   String
  adresse  String
  homeLat  Float
  homeLong Float

  // École
  school   School @relation(fields: [schoolId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  schoolId String

  // Image de profil
  imageprofile   Image  @relation(fields: [imageprofileId], references: [id])
  imageprofileId String @unique

  // Parent
  parent   Users  @relation(fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId String

  // Abonnement (facultatif)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
}

// Modèle School
model School {
  id         String @id @default(uuid())
  nom        String
  adresse    String
  schoolLat  Float
  schoolLong Float

  // Relation inverse
  children Children[]
}

// Modèle Image
model Image {
  id     String         @id @default(uuid())
  url    String
  child  Children?
  driver DriverProfile?
}

// Modèle Subscription
model Subscription {
  id          String  @id @default(cuid())
  stripeSubId String? @unique
  plan        Plan
  status      String
  emailSent   Boolean @default(false)

  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())

  // Lien vers le parent
  parent   Users  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String

  // Enfants concernés par cet abonnement
  children Children[]
}

// Enum du plan
enum Plan {
  MONTHLY
  YEARLY
}
