// Générateur Prisma Client
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// Source de données PostgreSQL
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ------------------- USERS -------------------
model Users {
  id        String   @id @default(uuid())
  nom       String
  prenom    String
  email     String   @unique
  phone     String   @unique
  role      Role     @default(PARENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  children      Children[] // Pour les parents
  subscriptions Subscription[] // Pour les parents
  driverProfile DriverProfile? // Pour les chauffeurs
  buses         Bus[] // Buses assignées si DRIVER
}

// Enum des rôles
enum Role {
  PARENT
  ADMIN
  DRIVER
}

// ------------------- DRIVER PROFILE -------------------
model DriverProfile {
  id     String @id @default(uuid())
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // Photo de profil
  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique

  // Relation vers le permis
  license   DriverLicense? @relation(fields: [licenseId], references: [id])
  licenseId String?        @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------- DRIVER LICENSE -------------------
model DriverLicense {
  id                String      @id @default(uuid())
  licenseNumber     String
  licenseType       LicenseType
  licenseExpiration DateTime

  // Photos du permis
  photoFront String?
  photoBack  String?

  driverProfile DriverProfile?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum LicenseType {
  A
  B
  C
  D
  E
}

// ------------------- CHILDREN -------------------
model Children {
  id       String @id @default(uuid())
  nom      String
  prenom   String
  adresse  String
  homeLat  Float
  homeLong Float

  // École
  school   School @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  schoolId String

  // Image de profil
  imageprofile   Image  @relation(fields: [imageprofileId], references: [id])
  imageprofileId String @unique

  // Parent
  parent   Users  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String

  // Abonnement (facultatif)
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  // Bus assigné
  bus   Bus?    @relation(fields: [busId], references: [id])
  busId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ------------------- SCHOOL -------------------
model School {
  id         String @id @default(uuid())
  nom        String
  adresse    String
  schoolLat  Float
  schoolLong Float

  // Relation inverse
  children Children[]
}

// ------------------- IMAGE -------------------
model Image {
  id     String         @id @default(uuid())
  url    String
  child  Children?      @relation
  driver DriverProfile? @relation
}

// ------------------- SUBSCRIPTION -------------------
model Subscription {
  id          String  @id @default(cuid())
  stripeSubId String? @unique
  plan        Plan
  status      String
  emailSent   Boolean @default(false)

  cancelAtPeriodEnd Boolean  @default(false)
  createdAt         DateTime @default(now())

  // Lien vers le parent
  parent   Users  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String

  // Enfants concernés
  children Children[]
}

enum Plan {
  MONTHLY
  YEARLY
}

// ------------------- BUS -------------------
model Bus {
  id        String    @id @default(uuid())
  matricule String    @unique
  brand     String
  seats     Int
  status    BusStatus @default(ACTIF)

  // Chauffeur du bus
  driver   Users  @relation(fields: [driverId], references: [id])
  driverId String

  // Enfants assignés à ce bus
  children Children[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BusStatus {
  ACTIF
  MAINTENANCE
}
